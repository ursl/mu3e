#!/usr/bin/env perl

# Usage:       monSlurm [-i jobs.list] [-r]
# ------
#              check status of slurm jobs
#
# 2021/08/24   Add more error conditions for better diagnosis
# 2021/08/23   Make it run again (changed t3 server name; included check for time limit cancellation
# 2019/10/25   First version
#
# ----------------------------------------------------------------------
# Send all questions, wishes and complaints to the
#
# Author    Urs Langenegger <urslangenegger@gmail.com>
# ----------------------------------------------------------------------

use Time::Local;
use Getopt::Std;
getopts('di:koru:v');

# -- jobs list
my $jobslist = "jobs.list";
if ($opt_i) {
    $jobslist = $opt_i;
}

my $STORAGE1 = "srm://storage01.lcg.cscs.ch:8443/srm/managerv2\?SFN=";

my $goodJobs = 0;
my $runningJobs = 0;
my $badJobs  = 0;
my $minGood  = 9999999999;
my $workerNode = "";
my $jobTime = "";
my $jobTimeSum = "";


open(IN, $jobslist) || die "Cannot find file $jobslist with grid jobs\n";

my $user  = $ENV{'USER'};
my $home  = $ENV{'HOME'};

while(<IN>) {
    next if (/\#\#\#/);

    # -- parse one job: one line for all
    $line = $_;
    chop($line);

    if ($opt_v) {print "$line\n";}
    $line =~ s/\# //;
    $line =~ s/\s{2,99}/ /g;
    $line =~ s/slurm //g;
    ($machine, $date, $time, $dir, $jname, $slurmNumber) = split(/ /, $line);
    my $pwd = `pwd`; chop($pwd);
    my $mdir = $dir;
    $mdir =~ s%$pwd/%%;
    (my $logfile = $mdir) =~ s/tmp-//;
    $logfile .= ".slurm.log";

    (my $errfile = $logfile) =~ s/\.log/\.err/;

    if (-e "$mdir/$logfile") {
	if ($opt_v) {print "parseOutput(\"$mdir/$logfile\")\n";}
	$ok = parseOutput("$mdir/$logfile");
	if ($ok eq "running") {
	    # -- check error file for possible issues
	    open(IN2, "$mdir/$errfile") || die "Cannot read $mdir/$errfile";
	    @in2 = <IN2>;
	    close(IN2);

	    $issue = grep(/slurmstepd: error: [[:ascii:]]*TIME LIMIT/i, @in2);
	    if ($issue) {
		$ok = "cancelTimeLimit";
		$rsize = -1;
	    }
	    $issue = grep(/slurmstepd: error: [[:ascii:]]*out-of-memory/i, @in2);
	    if ($issue) {
		$ok = "oom-fill Mem";
		$rsize = -1;
	    }
	} else {
	    ($rsize, $srmFile) = rootFileSize("$mdir/$logfile");
	}
	$lsize = -s "$mdir/$logfile";
    } elsif (-e "$mdir/local.log") {
	if ($opt_v) {print "parseOutput(\"$mdir/local.log\")\n";}
	$ok = parseOutput("$mdir/local.log");
	if ($ok eq "running") {
	} else {
	    ($rsize, $srmFile) = rootFileSize("$mdir/local.log");
	}
	$lsize = -s "$mdir/local.log";
    } else {
	if (-e "$mdir/$jobslist" && ($slurmNumber > 0)) {
	    $ok = "waiting";
	} else {
	    print "$mdir/$logfile not found???\n";
	    system("/bin/rm -f  $mdir/OK");
	    system("/bin/touch $mdir/NOK");
	    $badJobs++;
	    next;
	}
    }

    if ($ok eq "running" || $ok eq "waiting") {
	printf("%7i %-10s %33s, %s\n", $slurmNumber, $jname, $ok, $mdir);
    } else {
	if ($ok eq "cancelTimeLimit") {
	    $ok = "cancelTimeLimit ";
	} elsif ($rsize < 0) {
	    $ok = "no rootfile     ";
	} elsif ($rsize < 1) {
	    $ok = "rootfile empty  ";
	}
	printf("%7i %-10s %s/root: %10i, %30s (%s/%s sec)\n", $slurmNumber, $jname, $ok, $rsize, $mdir, $workerNode, $jobTime);
    }

    if ($ok =~ /no problems seen/) {
	system("/bin/touch $mdir/OK");
	$jobTimeSum += $jobTime;
	$goodJobs++;
	if ($rsize < $minGood) {$minGood = $rsize;}
    } elsif ($ok eq "running" || $ok eq "waiting") {
	$runningJobs++;
	if ($opt_k) {
	    $bla = `cancel $slurmNumber`;
	    print $bla;
	    if (!$opt_d) {
		system("/bin/rm -f  $mdir/OK");
		system("/bin/touch $mdir/NOK");
	    }
	}
    } else {
	if (!$opt_d) {
	    system("/bin/rm -f  $mdir/OK");
	    system("/bin/touch $mdir/NOK");
	}
	$badJobs++;
	if ($opt_r) {
	    print "--> removing $srmFile\n";
	    system("srmrm $srmFile");
	}
    }
}

print "----------------------------------------------------------------------\n";
print "Successful jobs: $goodJobs\n";
print "Running jobs: $runningJobs\n";
print "Failed jobs:     $badJobs\n";
if ($goodJobs > 0) {
    $ave  = $jobTimeSum/$goodJobs;
    $hours = int($ave/3600);
    $mins = int(($ave - $hours*3600)/60);
    $secs = int(($ave - $hours*3600)%60);
    print "Minimum rootfile size of good jobs: $minGood\n";
    printf("Average running time of good jobs:  %.f sec = %02d:%02d:%02d\n", $ave, $hours, $mins, $secs);
}
print "----------------------------------------------------------------------\n";


# ----------------------------------------------------------------------
sub parseOutput {
    (my $llogfile) = @_;

    open(IN1, "$llogfile") || die "Cannot read $llogfile";
    @in = <IN1>;
    close(IN1);

    my $startTime;
    # -- remove fixed line dependence of start time parsing
    for ($i = 2; $i < 10; $i++) {
	$startTime = convert($in[$i]);
	if ($startTime > 0) {
	    # print("startTime = $startTime \n");
	    last;
	}
    }
    my $endTime   = $startTime - 1;
    if (grep(/run: This is the end, my friend/, @in)) {
	$endTime = convert($in[$#in-1]);
    }

    if ($endTime > $startTime) {
	$jobTime = $endTime - $startTime;
    } else {
	$jobTime = "@#$%! ";
    }


    my $result = "running";

    @foundPattern = grep(/Linux /, @in);
    @words = split(/ /, $foundPattern[0]);
    if ($#words > -1) {
	$workerNode = $words[1];
    }
    if ($opt_v) {print "-> $workerNode\n";}

    # -- now search for possible problems in the logfile
    $foundException = grep(/error, no events seen/, @in);
    if ($foundException) { return "no events seen"; }

    $foundException = grep(/cms::exception/i, @in);
    if ($foundException) { return "cms::exception found"; }

    $foundException = grep(/Begin Fatal Exception/i, @in);
    if ($foundException) { return "Begin Fatal Exception found"; }

    $foundException = grep(/Abort \(core dumped\)/i, @in);
    if ($foundException) { return "abort/core dump detected"; }

    $foundGlibc     = grep(/glibc detected/i, @in);
    if ($foundGlibc) {return "abort/core dump detected"; }

    $foundBadAlloc   = grep(/std::bad_alloc/i, @in);
    if ($foundBadAlloc) {return "std::bad_alloc detected"; }

    $foundSEGV   = grep(/segmentation violation/i, @in);
    if ($foundSEGV) {return "segmentation violation detected"; }

    $foundJavaProblem   = grep(/java.lang.Error/i, @in);
    if ($foundJavaProblem) {return "java.lang.Error detected"; }

    $foundROOTProblem   = grep(/TNetXNGFile::Open/i, $llogfile);
    if ($foundROOTProblem) {return "TNetXNGFile::Open failure"; }

    $foundMyEnd         = grep(/run: This is the end, my friend/i, @in);
    if ($foundMyEnd) {
	$result = "no problems seen";
	return $result;
    }

    $foundTerminated = grep(/JOB Resource USAGE for job/i, @in);
    if ($foundTerminated) {return "terminated job  "; }

    $foundTerminated = grep(/JOB Live Resources USAGE for job/i, @in);
    if ($foundTerminated) {return "terminated job  "; }

    $foundTerminated = grep(/JOB Historical Resources USAGE for job/i, @in);
    if ($foundTerminated) {return "terminated job  "; }

    if ($opt_v) {print "-> return $result\n";}
    return $result;
}


# ----------------------------------------------------------------------
sub rootFileSize {
    (my $llogfile) = @_;

    my $result  = 0;

    open(LIN, "$llogfile") || die "Cannot open $llogfile\n";
    my $lfn = "";
    # print "logfile: $llogfile\n";
    my $gotRoot = 0;
    my $gotLog = 0;
    my $locationrootfile = "";
    my $rpath = "";
    while(<LIN>) {
	if (($gotRoot == 0) && (/slurm check that rootfile was copied/)) {
	    chop;
	    ($bla, $rest) = split(/ $user /);
	    ($group, $rsize, $rest1) = split(/ /, $rest, 3);
	    ($month, $day, $time, $rpath) = split(/ /, $rest1);
	    #print "gotRoot> bla   =  ->$bla<-\n";
	    #print "gotRoot> rest  =  ->$rest<-\n";
	    #print "gotRoot> rest1 =  ->$rest1<-\n";
	    #print "gotRoot> rsize =  ->$rsize<-\n";
	    #print "gotRoot> path  =  ->$rpath<-\n";
	    if ($rsize > 0) {
		$gotRoot = 1;
	    } 
	}
    }
    close(LIN);

    # -- check that the rootfile really exists on the SE
    if ($gotRoot) {
	if (-e $rpath) {
	    $result = $rsize;
	}
    } else {
	$result = -1;
    }

    return ($result, "$rpath");
}


# Convert your date strings to Unix/perl style time in seconds
# The main problems you have here are:
# * parsing the date formats
# * converting the month string to a number from 1 to 11
sub convert {
    my $dstring = shift;

    my %m = ( 'Jan' => 0, 'Feb' => 1, 'Mar' => 2, 'Apr' => 3,
	      'May' => 4, 'Jun' => 5, 'Jul' => 6, 'Aug' => 7,
	      'Sep' => 8, 'Oct' => 9, 'Nov' => 10, 'Dec' => 11 );
    if ($dstring =~ /(\S+)\s+(\d+)\s+(\d{2}):(\d{2}):(\d{2})\s+(\S+)\s+(\d+)/)  {
        my ($month, $day, $h, $m, $s, $zone, $year) = ($1, $2, $3, $4, $5, $6, $7);
        my $mnumber = $m{$month}; # production code should handle errors here

        timelocal( $s, $m, $h, $day, $mnumber, $year - 1900 );
    } else {
	-1;
    }
}
