#! /usr/bin/perl

# ----------------------------------------------------------------------
# cpFilesFromGitDir
# ===================
#
# Make copies of files in some git directory that are not committed
# 
#
# Usage:    ./cpFiles [-m "message"] [-b] [-d] [-c] [-f file] -g gitdir
#
#           -b bootstrap: get all files that are not in (origin) dev, i.e. `git diff --name-only remotes/origin/dev`
#           -d debug mode
#           -c compare
#           -f only a single file
#           -g specify git directory
#           -m message to be put into cpBack
#
# Examples: cd ~/mu3e/mu3eanca/code/p0000
#           ../../perl/cpFilesFromGitDir -m "2022/09/06 bla" -g ~/data/mu3e-dev-smb
#
# History   2022/09/01 first shot
#           2022/09/02 add cpBack to export to anywhere, plus opt_m
#           2022/09/06 improve dbx option to provide more information
#           2022/09/06 add opt_f to allow pulling a single file
#           2022/09/07 add opt_c to compare the local files with repo
#           2022/09/19 skip tar files, jobs.list, and symlinks (introduce skipList and tar check)
# ----------------------------------------------------------------------
# Send all questions, wishes and complaints to the 
#
# Author    Urs Langenegger <urslangenegger@gmail.com>
# ----------------------------------------------------------------------

use File::Basename;
use Getopt::Std;
getopts('bcdf:g:m:');

# -- current "project" for backup storage
my $basedir = `pwd`;
chop($basedir);

# -- skip list
my @skiplist = ("jobs.list",
                "tar.gz",
                "cryogenics.bin",
                "field.bin",
                "hauge1.bin",
                "sig.bin",
                "sig2.bin"
    );              

# -- where to get the files from 
my $gitdir = "/psi/home/langenegger/data/mu3e-4.6-smb";
if ($opt_g) {
    $gitdir = $opt_g;
} else {
    die("you must specify the argument  -g gitdir\n");
}

my @files = getFileList();
my @cpFiles = (); 

# -- copy files
if ($opt_d) {
    print("===========================\n");
    print("==>dbx file for copying\n");
}

foreach $file (@files) {
    my($barefile, $directories) = fileparse($file);
    if (grep(/$barefile/, @skiplist)) {
        print("skip $file ... found $barefile in skiplist\n");
        next;
    }
    if ($barefile =~ /tar.gz/) {
        print("skip $file ... identified $barefile as tar file\n");
        next;
    }

    if ($opt_f && !($file =~ $opt_f)) {
        next;
    }
    if ($opt_c) {
        print("$file\n");
        system("diff $barefile $gitdir/$file");
        next;
    }

    if (!$opt_d) {
        print("cp $gitdir/$file .\n");
        system("/bin/cp -a $gitdir/$file ."); # preserve time and do not follow symlinks
    } else {
        print("dbx cp $gitdir/$file .\n");
    }
    push(@cpFiles, $file);
}

# -- write cpBack to allow copying these files to anywhere (if you replace the first line in cpBack)
if (!$opt_d) {
    my $preamble = "";    
    if (-e "cpBack") {
        open(IN, "cpBack") || die  "Hm?\n";
        while(<IN>){
            if (/^#/) {
                $preamble .= $_;
            }
        }
        close(IN);
    }
    
    open(IN, ">cpBack") || die "cannot open cpBack file\n";
    print IN "$preamble";
    if ($opt_m) {
        print IN "# $opt_m\n";
    }
    print IN "cd $gitdir\n";
    foreach $file (@cpFiles) {
        my($barefile, $directories) = fileparse($file);
        print IN "cp $basedir/$barefile $file\n";
    }
    close(IN);
} else {
    print("dbx $opt_m\n");
    chdir($gitdir);
    print("===========================\n");
    print("==>dbx show stats diff\n");
    system("git --no-pager diff --stat");
    print("===========================\n");
    print("==>dbx show untracked files\n");
    system("git ls-files -o |grep -v _build |grep -v '~'");
    chdir($basedir);
}

# ----------------------------------------------------------------------
sub getFileList {
    chdir($gitdir);
    if ($opt_b) {
        @git = `git diff --name-only remotes/origin/dev`;
    } else {
        @git = `git st --porcelain`;
    }
    chdir($basedir);
    @lfiles = ();
    foreach $file (@git) {
        chop($file);
        $file =~ s/\s*M\s//;
        $file =~ s/\?\?\s//;
        if ($file =~ /\/$/) {
        } else {
            push(@lfiles, $file)
        }
    }

    # -- debug
    if (0) {
        foreach $file (@lfiles) {
            print("$file\n")
        }
    }
    
    return @lfiles;
}
