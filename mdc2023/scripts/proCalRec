#! /usr/bin/perl

# ----------------------------------------------------------------------
# proCalRec
# =========
#
# Usage:   ~/mu3e/mu3eanca/mdc2023/scripts/proCalRec
#
#
# History
#         2023/08/08 first shot
# ----------------------------------------------------------------------
# Send all questions, wishes and complaints to the 
#
# Author    Urs Langenegger <urslangenegger@gmail.com>
# ----------------------------------------------------------------------
use Cwd;
use File::Basename;

my $dir = getcwd;

use Getopt::Std;
getopts('n:t:');

# ----------------------------------------------------------------------
# -- default values
# ----------------------------------------------------------------------
# -- code directory (git backed up)
my $pcrCodeDir   = "/psi/home/langenegger/mu3e/mu3eanca/mdc2023";
# -- code directory (git backed up)
my $pcrCalCode   = "/psi/home/langenegger/mu3e/mu3eanca/db0/cdb1";
# -- base directory where jobs are submitted and all output will appear
my $pcrBaseDir   = "/psi/home/langenegger/data/mdc2023";
# -- source data directory on mu3ebe
my $pcrMu3eBEDir = ".ursl/data";
# -- target data directory on merlin
my $pcrDataDir   = "$pcrBaseDir/data";
# -- analyzer executable
my $pcrExe       = "/psi/home/langenegger/data/230816-mdc2023/analyzer/_build/analyzer/analyzer_mu3e";
# -- analyzer config directory with cnt.json and config.json
my $pcrConfig    = "/psi/home/langenegger/data/230816-mdc2023/analyzer/analyzer/config/";
# -- JSON CDB 
my $pcrJsonDir   = "$pcrBaseDir/json";
# -- tarfile
my $pcrTarFile   = "230809-analyzer.tar.gz";
if ($opt_t) {
    my($barefile, $directories) = fileparse($opt_t);
    $pcrTarFile = $barefile;
}
print(&prefix("proCalRec"), "Tar file: $pcrTarFile\n");

# -- initialize what has been processed so far
my @processedRuns;
&readProcessedRuns(@processedRuns);

my $nevts = 1000000; 
if ($opt_n) {
    $nevts = $opt_n;
}
print(&prefix("proCalRec"), "nevts: $nevts\n");

# ----------------------------------------------------------------------
# -- the loop
# ----------------------------------------------------------------------
while (1) {
    # -- should be migrated out
    &pcrTransfer();
    # -- check whether something needs to be done
    my $run = &checkForNewRun();
    if ($run eq "nada") {
        print(&prefix("proCalRec"), "Nothing new ->$run<-\n");
        sleep(10);
        next;
    }
    print(&prefix("proCalRec"), "Now processing $run\n");
    
    # -- count events in new file
    $cntEvts = &pcrCountEvents(265);
    #    $cntEvts = 41440245;

    # -- submit analyzer jobs to slurm and merge output
    my $pcrrootfile =  &pcrSubmitJobs("00265", $cntEvts);
    
    # -- run local calibration 
    if ($pcrrootfile eq "nada") {
        print(&prefix("proCalRec"), "pcrSubmitJobs did not complete successfully\n");
    } else {
        &pcrRunCalibration($pcrrootfile);
    }

    # -- update IOVs

    # -- update $pcrBaseDir/proCalRec.runs
    open(OUT, ">>$pcrBaseDir/proCalRec.runs") || die "proCalRec: Cannot open $pcrBaseDir/proCalRec.runs\n";
    print OUT "$run\n";
    close(OUT);
    

}


# ----------------------------------------------------------------------
sub pcrTransfer() {
    print(&prefix("pcrTransfer"),  "rsync -avL -e \"ssh mu3e\@mu3egw ssh\" mu3e\@mu3ebe:$pcrMu3eBEDir/ $pcrDataDir\n");
    # -- Note
    #    o the trailing '/'
    #    o -L transform symlink into referent file/dir
    system("rsync -avL -e \"ssh mu3e\@mu3egw ssh\" mu3e\@mu3ebe:$pcrMu3eBEDir/ $pcrDataDir/");
}


# ----------------------------------------------------------------------
sub pcrCountEvents() {
    ($run) = @_;
    my $file = sprintf("$pcrDataDir/run%05d.mid", $run);
    print(&prefix("pcrCountEvent"), "run = $run -> file = $file\n");
    
    my $cmdString = "cd $pcrBaseDir/cnt && $pcrExe --no-profiler --config $pcrConfig/cnt.json $file";
    print(&prefix("pcrCountEvent"),       "$pcrExe --no-profiler --config $pcrConfig/cnt.json $file\n");
    $line = `$cmdString`;
    my @lines = grep /\S/, split /\n/, $line;
    $result = pop(@lines);
    $result =~ s/cntEvents::EndRun, cnt = //;
    print(&prefix("pcrCountEvent"), "pcrCountEvents = $result\n");
    return $result;
}


# ----------------------------------------------------------------------
sub pcrSubmitJobs() {
    ($run, $lcevts) = @_;
    my $pcrFile = "nada";
    
    my $file = sprintf("$pcrDataDir/run%05d.mid", $run);
    print(&prefix("pcrSubmitJobs"), "pcrSubmitJobs run = $run -> file = $file\n");
    my $cmdString = "";
    my $envString = "";

    $cmdIniString .= "cd $pcrBaseDir/slurm/jobs && ";
    $cmdIniString .= "$pcrCodeDir/../slurm/run -t ../$pcrTarFile -c $pcrCodeDir/scripts/slurm-analyzer.csh ";
    
    # -- encode the configuration of the SLURM job
    $envString .= "'STORAGE1 $pcrBaseDir/slurm/storage1";
    $envString .= "%PCRDATADIR $pcrDataDir";
    $envString .= "%MIDASFILE run$run.mid";
    $envString .= "%RUN $run";

    # map ($slurmID => logfile)
    my %mSlurmIds;
    my @mergeFiles;
    my $NJOBS = int($lcevts/$nevts) + 1;
    for ($ijob = 0; $ijob < $NJOBS; $ijob++) {
        $job =  "$run" . "_$ijob";

        $rootString = "%ROOTFILE pcr-run$job.root";

        $skipevts = $ijob * $nevts;
        if ($ijob < $NJOBS - 1) {
            $anlString  = "%ANLZR \"-s$skipevts\" -e$nevts'";
        } else {
            $anlString  = "%ANLZR \"-s$skipevts\" -e$nevts'";
        }
        
        $cmdString = $cmdIniString . "-r $envString$rootString$anlString " . "$job";
    
        print(&prefix("pcrSubmitJobs"), "SLURM: STORAGE1 $pcrBaseDir/slurm/storage1 ROOTFILE pcr-run$run.root $anlString\n");
        $line = `$cmdString`;
        # -- to see $line, uncomment the next line: 
        # print($line);
        
        my @lines = grep /\S/, split /\n/, $line;
        
        my $slurmid = 0, $slurmout = "nada", $rootout = "nada";
        foreach $ln (@lines) {
            if ($ln =~ /Submitted ->([0-9]*)<- with name \.*/) {
                $slurmid = $1;
            }
            if ($ln =~ /batch submission: (\w*)/) {
                $slurmout = $1;
            }
            if ($ln =~ /ROOTFILE/) {
                ($rootout = $ln) =~ s/ROOTFILE //g;
            }
        }
        if ($slurmid > 0) {
            print(&prefix("pcrSubmitJobs"), "SLURM job $slurmid -> $slurmout\n");
            $mSlurmIds{$slurmid} =  "tmp-$job/$slurmout.slurm.log";
            push(@mergeFiles, $rootout);
        }
    }

    my $njobs = keys %mSlurmIds;
    if ($njobs < 1) {
        print(&prefix("pcrSubmitJobs"), "ERROR no slurm job finished, something went wrong?!\n");
        return $pcrFile;
    }

    my $slurmids = "(";
    my $cnt = 0; 
    foreach $ele (keys %mSlurmIds) {
        $slurmids .= $ele;
        $cnt++;
        if ($cnt < $njobs) {$slurmids .= ", ";}
    }
    $slurmids .= ")";
    print(&prefix("pcrSubmitJobs"), "slurmids = $slurmids, waiting for jobs to finish\n");
    while ($njobs > 0) {
        sleep(10);
        foreach $sjob (keys %mSlurmIds) {
            $result = `/bin/squeue -j $sjob`;
            my @lines = grep /\S/, split /\n/, $result;
            my $le = @lines;
            my $tail = `/bin/tail -1 $pcrBaseDir/slurm/jobs/$mSlurmIds{$sjob}`;
            print("    [$sjob] $tail");
            if ($tail =~ /This is the end, my friend/) {
                delete($mSlurmIds{$sjob});
                # print("removed $mSlurmIds{$sjob} from mSlurmIds\n");

                my $bla = $mSlurmIds{$sjob};
            }
            $njobs = keys %mSlurmIds;
        }
    }

    print(&prefix("pcrSubmitJobs"), "all slurm jobs finished\n");

    $output = "$pcrBaseDir/slurm/storage1";
    my $mergeString = "hadd $output/pcr-run$run.root ";
    system("/bin/rm -f $output/pcr-run$run.root");

    $pcrFile = "$output/pcr-run$run.root";
    $mergeString = "hadd $pcrFile";
    foreach $rf (@mergeFiles)  {
        $mergeString .= " $output/$rf ";
    }
    
    my $result = `$mergeString`;
    print("$result\n");
    print(&prefix("pcrSubmitJobs"), "merged root file: $pcrFile\n");
    return $pcrFile;
}


# ----------------------------------------------------------------------
sub pcrRunCalibration() {
    ($cfile) = @_;
    print(&prefix("pcrRunCalibration"), "cd $pcrCalCode && bin/pcrPixelQuality -f $cfile -j $pcrJsonDir; cd - ");
    system("cd $pcrCalCode && bin/pcrPixelQuality -f $cfile -j $pcrJsonDir; cd - ");
}

# ----------------------------------------------------------------------
sub readProcessedRuns() {
    (@processedRuns) = @_;
    open(IN, "$pcrBaseDir/proCalRec.runs") || die "proCalRec: Cannot open $pcrBaseDir/proCalRec.runs\n";
    while (<IN>) {
        chop;
        push(@processedRuns, $_); 
    }
    close(IN);
    
    print(&prefix("readProcessedRuns"), "processed runs: ");
    foreach $irun (@processedRuns) {
        print(" $irun"); 
    }
    print("\n");
}


# ----------------------------------------------------------------------
sub checkForNewRun() {
    my @midFiles  = glob("$pcrDataDir/*.mid");
    my @newruns = ();
    foreach $file (@midFiles) {
        my($barefile, $directories) = fileparse($file);
        $barefile =~ /run([0-9]*).mid/;
        $run = $1;

        if (grep( /^$run$/, @processedRuns ) ) {
            print "Found $run in processedRuns\n";
        } else {
            push(@newruns, $run);
        }
    }
    print(&prefix("checkForNewRun"), "New runs: ");

    foreach $irun (@newruns) {
        print(" $irun"); 
    }
    print("\n");
    
    $result = "nada";
    if ($#newruns > 0) {
        $result = shift(@newruns);
    }
    print("checkForNewRun() return $result\n");
    
    return $result;
}

# ----------------------------------------------------------------------
sub prefix() {
    ($long) = @_;
    my $now = localtime;
    # -- fill up in case too short
    $long .= "                         ";
    $shorter = substr($long, 0, 15);
    return ($now . "/" . $shorter . "/ ");
}
