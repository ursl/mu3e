#
# Macro file for the initialization phase of "exampleN02.cc"
# when runing in interactive mode
#
# Sets some default verbose
#
/control/verbose 0
/run/verbose 0
/tracking/storeTrajectory 3
#
# Use this open statement to create an OpenGL view:
#/vis/open OGL 600x600-0+0
/vis/open OGL
#
# Use this open statement to create a .prim file suitable for
# viewing in DAWN:
#/vis/open DAWNFILE
#
# Use this open statement to create a .heprep file suitable for
# viewing in HepRApp:
#/vis/open HepRepFile
#
# Use this open statement to create a .wrl file suitable for
# viewing in a VRML viewer:
#/vis/open VRML2FILE
#
# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/verbose errors
#
/vis/viewer/set/background white
# Draw geometry:
/vis/drawVolume
#
# Specify view angle:
/vis/viewer/set/viewpointThetaPhi 0. 180.
#
# Specify zoom value:
/vis/viewer/zoom 10.0
#
# Specify style (surface or wireframe):
#/vis/viewer/set/style wireframe
#
# Draw coordinate axes:
#/vis/scene/add/axes 0 0 0 1 m
#
# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories smooth
#/vis/modeling/trajectories/create/drawByCharge
#/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts true
#/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 2
## (if too many tracks cause core dump => /tracking/storeTrajectory 0)
#
# Draw hits at end of event:
#/vis/scene/add/hits
#
# To draw only selected particles:
/vis/filtering/trajectories/create/particleFilter
#/vis/filtering/trajectories/particleFilter-0/add nu_e
#/vis/filtering/trajectories/particleFilter-0/add nu_mu
#/vis/filtering/trajectories/particleFilter-0/add anti_nu_e
#/vis/filtering/trajectories/particleFilter-0/add anti_nu_mu
#/vis/filtering/trajectories/particleFilter-0/add gamma
/vis/filtering/trajectories/particleFilter-0/add e+
/vis/filtering/trajectories/particleFilter-0/add e-
/vis/filtering/trajectories/particleFilter-0/add mu+
#
# To invert the above, drawing all particles except gammas,
# keep the above two lines but also add:
#/vis/filtering/trajectories/particleFilter-0/invert true
#
# Many other options are available with /vis/modeling and /vis/filtering.
# For example, to select colour by particle ID:
/vis/modeling/trajectories/create/drawByParticleID
/vis/modeling/trajectories/drawByParticleID-0/set e- blue
/vis/modeling/trajectories/drawByParticleID-0/set e+ red
/vis/modeling/trajectories/drawByParticleID-0/set mu+ green
/vis/modeling/trajectories/drawByParticleID-0/set mu_eee+ cyan
/vis/modeling/trajectories/drawByParticleID-0/set mu_overlap+ cyan
/vis/modeling/trajectories/drawByParticleID-0/set gamma magenta
#/vis/modeling/trajectories/drawByParticleID-0/default/setDrawStepPts true
#/vis/modeling/trajectories/drawByParticleID-0/default/setStepPtsSize 2
#/vis/modeling/trajectories/drawByParticleID-0/default/setDrawAuxPts true
#/vis/modeling/trajectories/drawByParticleID-0/default/setAuxPtsSize 7
#/vis/modeling/trajectories/drawByParticleID-0/default/setAuxPtsColour red
##/vis/modeling/trajectories/drawByParticleID-0/default/setSmooth true
#
# To superimpose all of the events from a given run:
/vis/scene/endOfEventAction accumulate
#
# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
#/vis/verbose warnings
#
# For file-based drivers, use this to create an empty detector view:
#/vis/viewer/flush
#
#/vis/scene/add/trajectories smooth rich
#/tracking/storeTrajectory 3
#/run/beamOn 1
# Do some ray tracing...
#/vis/viewer/addCutawayPlane -0.0155 0 0 m 1 0 0
#/vis/rayTracer/eyePosition 0 0.5 0.5 m
#/vis/rayTracer/target 0 0 0 m
#/vis/rayTracer/lightDirection
#/vis/rayTracer/trace

#/vis/viewer/set/viewpointThetaPhi 90 0
#/geometry/test/maximum_errors 2
#/geometry/test/run